// JavaScript Grammar
// Taken from https://www.ecma-international.org/ecma-262/6.0/#sec-lexical-grammar

START = Script | Module;

/*
ZWNJ = "\\u200C";
ZWJ = "\\u200D";
BOM = "\\uFEFF";
BOM = /[﻿]/; // unused
HT = "\\t";
VT = "\\u000B";
FF = "\\u000C";
SP = " ";
NBSP = "\\u00A0";
LF = "\\n";
CR = "\\r";
LS = "\\u2028";
PS = "\\u2029";
*/

HT = "\t";
VT = /[]/;
FF = /[]/;
SP = " ";
NBSP = /[ ]/;
ZWNJ = /[‌]/;
ZWJ = /[‍]/;
LS = /[ ]/;
CR = "\r";
LF = "\n";
PS = /[ ]/;

/* A.1 Lexical Grammar */

// InputElementDiv = WhiteSpace | LineTerminator | Comment | CommonToken | DivPunctuator | RightBracePunctuator ;
// InputElementRegExp = WhiteSpace | LineTerminator | Comment | CommonToken | RightBracePunctuator | RegularExpressionLiteral ;
// InputElementRegExpOrTemplateTail = WhiteSpace | LineTerminator | Comment | CommonToken | RegularExpressionLiteral | TemplateSubstitutionTail ;
// InputElementTemplateTail = WhiteSpace | LineTerminator | Comment | CommonToken | DivPunctuator | TemplateSubstitutionTail ;
WhiteSpace = HT | VT | FF | SP | NBSP | ZWNJ /* | TODO USP*/ ;
LineTerminator = LF | CR | LS | PS ;
LineTerminatorSequence = LF | CR /*[lookahead ≠ LF ]*/ | LS | PS | CR LF ;
// Comment = MultiLineComment | SingleLineComment ;
//MultiLineComment = "/*" MultiLineCommentChars ? "*/" ;
MultiLineCommentChars = MultiLineNotAsteriskChar MultiLineCommentChars ? | "*" PostAsteriskCommentChars ? ;
PostAsteriskCommentChars = MultiLineNotForwardSlashOrAsteriskChar MultiLineCommentChars? | "*" PostAsteriskCommentChars ? ;
MultiLineNotAsteriskChar = /~*/ ;
MultiLineNotForwardSlashOrAsteriskChar = /~(\/|*)/;
/*
SingleLineComment = "//" SingleLineCommentChars ? ;
SingleLineCommentChars = SingleLineCommentChar  SingleLineCommentChars ? ;
SingleLineCommentChar = /~(
                         |
                         | | )/ ;
CommonToken = IdentifierName | Punctuator | NumericLiteral | StringLiteral | Template ;
*/
// IdentifierName = IdentifierStart | IdentifierName IdentifierPart ; // xxx was this
IdentifierName = IdentifierStart IdentifierPart+ ;
IdentifierStart = UnicodeIDStart | "$" | "_" | "\\" UnicodeEscapeSequence ;
IdentifierPart = UnicodeIDContinue | "$" | "_" | "\\" UnicodeEscapeSequence | ZWNJ | ZWJ ;
UnicodeIDStart = /./
/* TODO: any Unicode code point with the Unicode property “ID_Start” or “Other_ID_Start” */
;
UnicodeIDContinue = /./
/* TODO: any Unicode code point with the Unicode property “ID_Continue”, “Other_ID_Continue”, or “Other_ID_Start” */
;
/*
ReservedWord = Keyword | FutureReservedWord | NullLiteral | BooleanLiteral ;
Keyword = "break" |	"do" |	"in" |	"typeof" | "case" | "else" | "instanceof" |	"var" | "catch"
| 	"export" | 	"new" | 	"void" | "class" | 	"extends" | 	"return" | 	"while" | "const"
|  "finally" | 	"super" | 	"with" | "continue" | 	"for" | 	"switch" | 	"yield" | "debugger"
| "function" | 	"this" | "default" | 	"if" | 	"throw" | "delete" | 	"import" | 	"try" ;
FutureReservedWord = "enum" | "await" | "implements" | 	"package" | 	"protected" | "interface" | 	"private" | 	"public" ;
*/
/*
Punctuator =
"{"| 	"}"| 	"("| 	")"| 	"["| 	"]"|
"."| 	";"| 	","| 	"<"| 	">"| 	"<="|
">="| 	"=="| 	"!="| 	"==="| 	"!=="|
"+"| 	"-"| 	"*"| 	"%"| 	"++"| 	"--"|
"<<"| 	">>"| 	">>>"| 	"&"| 	"|"| 	"^"|
"!"| 	"~"| 	"&&"| 	"||"| 	"?"| 	":"|
"="| 	"+="| 	"-="| 	"*="| 	"%="| 	"<<="|
">>="| 	">>>="| "&="| 	"|="| 	"^="| 	"=>"
;
*/
// DivPunctuator = "/" | "/=" ;
// RightBracePunctuator = "}" ;
NullLiteral = "null" ;
BooleanLiteral = "true" | "false" ;
NumericLiteral = DecimalLiteral | BinaryIntegerLiteral | OctalIntegerLiteral | HexIntegerLiteral ;
DecimalLiteral =
DecimalIntegerLiteral  "." DecimalDigits ? ExponentPart ?
| "." DecimalDigits ExponentPart ?
| DecimalIntegerLiteral ExponentPart ?
;
DecimalIntegerLiteral = "0" | NonZeroDigit DecimalDigits ? ;
DecimalDigits = DecimalDigit | DecimalDigits DecimalDigit ;
DecimalDigit = "0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9" ;
NonZeroDigit = "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9" ;
ExponentPart = ExponentIndicator | SignedInteger ;
ExponentIndicator = "e" | "E" ;
SignedInteger = DecimalDigits | "+" DecimalDigits | "-" DecimalDigits ;
BinaryIntegerLiteral = "0b" BinaryDigits | "0B" BinaryDigits ;
BinaryDigits = BinaryDigit | BinaryDigits BinaryDigit ;
BinaryDigit = "0" | "1" ;
OctalIntegerLiteral = "0o" OctalDigits | "0O" OctalDigits ;
OctalDigits = OctalDigit | OctalDigits OctalDigit ;
OctalDigit = "0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" ;
HexIntegerLiteral = "0x" HexDigits | "0X" HexDigits ;
HexDigits = HexDigit+ ;
// HexDigit = "0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9" | "a" | "b" | "c" | "d" | "e" | "f" | "A" | "B" | "C" | "D" | "E" | "F" ; // xxx was this
HexDigit = /[0-9a-fA-F]/;
StringLiteral =
"\"" DoubleStringCharacters ? "\""
| "'" SingleStringCharacters ? "'"
;
DoubleStringCharacters = DoubleStringCharacter | DoubleStringCharacters ? ;
SingleStringCharacters = SingleStringCharacter | SingleStringCharacters ? ;
DoubleStringCharacter = /~(\\\"|
                         |
                         | | )/ | "\\" EscapeSequence | LineContinuation ;
SingleStringCharacter = /~('|
                         |
                         | | )/ | "\\" EscapeSequence | LineContinuation ;
LineContinuation = "\\" | LineTerminatorSequence ;
EscapeSequence = CharacterEscapeSequence | "0" /*[lookahead ∉ DecimalDigit] */ | HexEscapeSequence | UnicodeEscapeSequence ;
CharacterEscapeSequence = SingleEscapeCharacter | NonEscapeCharacter ;
SingleEscapeCharacter = "'" | "\"" | "\\" | "b" | "f" | "n" | "r" | "t" | "v" ;
NonEscapeCharacter = /~('|\\\"|\\\\|[bfnrtv0123456789x]|
                      |
                      | | )/ ;
// EscapeCharacter = SingleEscapeCharacter | DecimalDigit | "x" | "u" ;
HexEscapeSequence = "x" HexDigit HexDigit ;
UnicodeEscapeSequence = "u" Hex4Digits | "u{" HexDigits "}" ;
// Hex4Digits = HexDigit HexDigit HexDigit HexDigit ; // xxx was this
Hex4Digits = HexDigit{4};
RegularExpressionLiteral = "/" Pattern "/" RegularExpressionFlags ;
// RegularExpressionLiteral = "/" RegularExpressionBody "/" RegularExpressionFlags ; // xxx was this
//RegularExpressionBody = RegularExpressionFirstChar RegularExpressionChars ;
/*
RegularExpressionChars = "" /*[empty]*/ | RegularExpressionChars RegularExpressionChar ;
RegularExpressionFirstChar = /~(
                              |
                              | | |*|\\|\/|])/ | RegularExpressionBackslashSequence | RegularExpressionClass ;
RegularExpressionChar = /~(
                         |
                         | | |\\|\/|])/ | RegularExpressionBackslashSequence | RegularExpressionClass ;
RegularExpressionBackslashSequence = "\\" | RegularExpressionNonTerminator ;
RegularExpressionNonTerminator = /~(
                                  |
                                  | | )/ ;
RegularExpressionClass = "[" RegularExpressionClassChars "]" ;
RegularExpressionClassChars = "" /*[empty]*/ | RegularExpressionClassChars RegularExpressionClassChar ;
RegularExpressionClassChar = /~(
                              |
                              | | |]|\\\\)/ | RegularExpressionBackslashSequence ;
*/
RegularExpressionFlags = "" /*[empty]*/ | RegularExpressionFlags IdentifierPart ;

//Template = NoSubstitutionTemplate | TemplateHead ;
NoSubstitutionTemplate = "`"  TemplateCharacters ?  "`" ;
TemplateHead = "`" TemplateCharacters ? "${" ;
// TemplateSubstitutionTail = TemplateMiddle | TemplateTail ;
TemplateMiddle = "}" TemplateCharacters ? "${" ;
TemplateTail = "}" TemplateCharacters ? "`" ;
TemplateCharacters = TemplateCharacter TemplateCharacters ? ;
TemplateCharacter =
"$" /*[lookahead ≠ { ]*/
| "\\" EscapeSequence
| LineContinuation
| LineTerminatorSequence
| /~(
   |
   | | |`|$|\\\\)/
;

/* A.2 Expressions */

IdentifierReference = Identifier ; // /*[~Yield]*/ | "yield" ;
BindingIdentifier = Identifier ; // | "yield";
LabelIdentifier = Identifier ; // | /*[~Yield]*/ "yield" ;
Identifier = IdentifierName /* TODO but not ReservedWord */ ;
PrimaryExpression =
"this"
| IdentifierReference
| Literal
| ArrayLiteral
| ObjectLiteral
| FunctionExpression
| ClassExpression
| GeneratorExpression
| RegularExpressionLiteral
| TemplateLiteral
| ParenthesizedExpression
;

ParenthesizedExpression = "(" Expression ")" ;
Literal = NullLiteral | BooleanLiteral | NumericLiteral | StringLiteral ;
ArrayLiteral =
"[" Elision ? "]"
| "[" ElementList "]"
| "[" ElementList "," Elision ? "]"
;
ElementList =
Elision ? AssignmentExpression
| Elision ? SpreadElement
| ElementList "," Elision ? AssignmentExpression
| ElementList "," Elision ? SpreadElement
;
Elision = "," | Elision "," ;
SpreadElement = (AssignmentExpression WhiteSpace)+ ;
ObjectLiteral ="{" "}"
| "{" PropertyDefinitionList "}"
| "{" PropertyDefinitionList  "," "}"
;
PropertyDefinitionList =
PropertyDefinition WhiteSpace
| PropertyDefinitionList "," PropertyDefinition
;
PropertyDefinition =
IdentifierReference
| CoverInitializedName
| PropertyName ":" AssignmentExpression
| MethodDefinition
;
PropertyName = LiteralPropertyName | ComputedPropertyName ;
LiteralPropertyName = IdentifierName | StringLiteral | NumericLiteral ;
ComputedPropertyName = "[" AssignmentExpression "]" ;
CoverInitializedName = IdentifierReference WhiteSpace Initializer ;
Initializer = "=" WhiteSpace AssignmentExpression ;
TemplateLiteral = NoSubstitutionTemplate | TemplateHead Expression TemplateSpans ;
TemplateSpans = TemplateTail | TemplateMiddleList  TemplateTail ;
TemplateMiddleList = TemplateMiddle Expression | TemplateMiddleList TemplateMiddle Expression ;
MemberExpression =
PrimaryExpression 
| MemberExpression "[" Expression "]" 
| MemberExpression "." IdentifierName 
| MemberExpression TemplateLiteral 
| SuperProperty 
| MetaProperty 
| "new" MemberExpression Arguments
;
SuperProperty = 
"super" "[" Expression "]" 
| "super" "." IdentifierName
;
MetaProperty = NewTarget ;
NewTarget = "new" "." "target" ;
NewExpression = MemberExpression | "new" NewExpression ;
CallExpression =
MemberExpression Arguments 
| SuperCall 
| CallExpression Arguments 
| CallExpression "[" Expression "]" 
| CallExpression "." IdentifierName 
| CallExpression TemplateLiteral
;
SuperCall = "super" Arguments ;
Arguments = "(" ")" | "(" ArgumentList ")" ;
ArgumentList =
AssignmentExpression
| (AssignmentExpression WhiteSpace)+
| ArgumentList "," AssignmentExpression 
| ArgumentList "," AssignmentExpression+
;
LeftHandSideExpression = NewExpression | CallExpression ;
PostfixExpression = 
LeftHandSideExpression 
| LeftHandSideExpression /*[no LineTerminator here]*/ "++" 
| LeftHandSideExpression /*[no LineTerminator here]*/ "--"
;
UnaryExpression =
PostfixExpression
| "delete" UnaryExpression 
| "void" UnaryExpression 
| "typeof" UnaryExpression 
| "++" UnaryExpression 
| "--" UnaryExpression 
| "+" UnaryExpression 
| "-" UnaryExpression 
| "~" UnaryExpression 
| "!" UnaryExpression
;
MultiplicativeExpression = UnaryExpression |  MultiplicativeExpression MultiplicativeOperator UnaryExpression ;
MultiplicativeOperator = "*" | "/" | "%" ;
AdditiveExpression =
MultiplicativeExpression
| AdditiveExpression "+" MultiplicativeExpression
| AdditiveExpression "-" MultiplicativeExpression
;
ShiftExpression =
AdditiveExpression
| ShiftExpression "<<" AdditiveExpression
| ShiftExpression ">>" AdditiveExpression
ShiftExpression ">>>" AdditiveExpression
;
RelationalExpression =
ShiftExpression
| RelationalExpression "<" ShiftExpression
| RelationalExpression ">" ShiftExpression
| RelationalExpression "<=" ShiftExpression
| RelationalExpression ">=" ShiftExpression
| RelationalExpression "instanceof" ShiftExpression
| /*[+In]*/ RelationalExpression "in" ShiftExpression
;
EqualityExpression =
RelationalExpression
| EqualityExpression "==" RelationalExpression
| EqualityExpression "!=" RelationalExpression
| EqualityExpression "===" RelationalExpression
| EqualityExpression "!==" RelationalExpression
;
BitwiseANDExpression =
EqualityExpression
| BitwiseANDExpression "&" EqualityExpression
;
BitwiseXORExpression =
BitwiseANDExpression
| BitwiseXORExpression "^" BitwiseANDExpression
;
BitwiseORExpression =
BitwiseXORExpression
| BitwiseORExpression "|" BitwiseXORExpression
;
LogicalANDExpression =
BitwiseORExpression
| LogicalANDExpression "&&" BitwiseORExpression
;
LogicalORExpression =
LogicalANDExpression
| LogicalORExpression "||" LogicalANDExpression
;
ConditionalExpression =
LogicalORExpression
| LogicalORExpression "?" AssignmentExpression ":" AssignmentExpression
;
AssignmentExpression =
ConditionalExpression
| YieldExpression
| ArrowFunction
| LeftHandSideExpression "=" AssignmentExpression
| LeftHandSideExpression AssignmentOperator AssignmentExpression
;
AssignmentOperator = "*=" | "/=" | "%=" | "+=" | "-=" | "=" | "=" | "=" | "=" | "^=" | "|=" ;
Expression =
AssignmentExpression
| Expression "," AssignmentExpression
;

/* A.3 Statements */

Statement =
BlockStatement
| VariableStatement
| EmptyStatement
| ExpressionStatement
| IfStatement
| BreakableStatement
| ContinueStatement
| BreakStatement
| ReturnStatement
| WithStatement
| LabelledStatement
| ThrowStatement
| TryStatement
| DebuggerStatement
;
Declaration = HoistableDeclaration | ClassDeclaration | LexicalDeclaration ;
HoistableDeclaration = FunctionDeclaration | GeneratorDeclaration ;
BreakableStatement = IterationStatement | SwitchStatement ;
BlockStatement = Block ;
Block = "{" StatementList ? "}" LineTerminator ;
StatementList = StatementListItem LineTerminator | StatementList StatementListItem ;
StatementListItem = Statement | Declaration ;
LexicalDeclaration = LetOrConst WhiteSpace BindingList ";" ;
LetOrConst = "let" | "const" ;
BindingList =
LexicalBinding
| BindingList "," LexicalBinding
;
LexicalBinding =
BindingIdentifier Initializer ?
| BindingPattern Initializer
;
VariableStatement = "var" WhiteSpace VariableDeclarationList ";" ;
VariableDeclarationList =
VariableDeclaration
| VariableDeclarationList "," VariableDeclaration
;
VariableDeclaration =
BindingIdentifier Initializer ?
| BindingPattern Initializer
;
BindingPattern = ObjectBindingPattern | ArrayBindingPattern ;
ObjectBindingPattern =
"{" "}"
| "{" BindingPropertyList "}"
| "{" BindingPropertyList "," "}"
;
ArrayBindingPattern =
"[" Elision ? BindingRestElement ? "]"
| "[" BindingElementList "]"
| "[" BindingElementList "," Elision ? BindingRestElement ? "]"
;
BindingPropertyList = BindingProperty | BindingPropertyList "," BindingProperty ;
BindingElementList = BindingElisionElement | BindingElementList "," BindingElisionElement ;
BindingElisionElement = Elision ? BindingElement ;
BindingProperty = SingleNameBinding | PropertyName ":" BindingElement ;
BindingElement =
SingleNameBinding
| BindingPattern Initializer ?
;
SingleNameBinding = BindingIdentifier (WhiteSpace Initializer)? ;
BindingRestElement = (BindingIdentifier WhiteSpace)+ ;
EmptyStatement = ";" ;
ExpressionStatement = /*[lookahead ∉ {{, function, class, let [}]*/ Expression ";" ;
IfStatement =
"if" "(" Expression ")" Statement "else" Statement
| "if" "(" Expression ")" Statement
;
IterationStatement =
"do" Statement "while" "(" Expression ")" ";"
| "while" "(" Expression ")" Statement
| "for" "(" /*[lookahead ∉ {let [}]*/ Expression? ";" Expression? ";" Expression? ")" Statement
| "for" "(" "var" VariableDeclarationList ";" Expression ? ";" Expression ? ")" Statement
| "for" "(" LexicalDeclaration Expression ? ";" Expression ? ")" Statement
| "for" "(" /*[lookahead ∉ {let [}]*/ LeftHandSideExpression "in" Expression ")" Statement
| "for" "(" "var" ForBinding "in" Expression ")" Statement
| "for" "(" ForDeclaration "in" Expression ")" Statement
| "for" "(" /*[lookahead ≠ let ]*/ LeftHandSideExpression "of" AssignmentExpression ")" Statement
| "for" "(" "var" ForBinding "of" AssignmentExpression ")" Statement
| "for" "(" ForDeclaration "of" AssignmentExpression ")" Statement
;
ForDeclaration = LetOrConst ForBinding ;
ForBinding = BindingIdentifier | BindingPattern ;
ContinueStatement =
"continue" ";"
| "continue" /*[no LineTerminator here]*/ LabelIdentifier ";"
;
BreakStatement =
"break" ";"
| "break" /*[no LineTerminator here]*/ LabelIdentifier ";"
;
ReturnStatement =
"return" ";"
| "return" /*[no LineTerminator here]*/ Expression ";"
;
WithStatement = "with" "(" Expression ")" Statement ;
SwitchStatement = "switch" "(" Expression ")" CaseBlock ;
CaseBlock =
"{" CaseClauses ? "}"
| "{" CaseClauses ? DefaultClause CaseClauses ? "}"
;
CaseClauses = CaseClause LineTerminator | CaseClauses CaseClause ;
CaseClause = "case" Expression ":" StatementList ? ;
DefaultClause = "default" ":" StatementList ? ;
LabelledStatement = LabelIdentifier ":" LabelledItem ;
LabelledItem = Statement | FunctionDeclaration ;
ThrowStatement = "throw" WhiteSpace /*[no LineTerminator here]*/ Expression ";" ;
TryStatement =
"try" Block Catch
| "try" Block Finally
| "try" Block Catch Finally
;
Catch = "catch" "(" CatchParameter ")" Block ;
Finally = "finally" Block ;
CatchParameter = BindingIdentifier | BindingPattern ;
DebuggerStatement = "debugger" ";" ;

/* A.4 Functions and Classes */

FunctionDeclaration =
"function" WhiteSpace BindingIdentifier "(" FormalParameters ")" "{" FunctionBody "}"
| /*[+Default]*/ "function" "(" FormalParameters ")" "{" FunctionBody "}"
;
FunctionExpression = "function" BindingIdentifier ? "(" FormalParameters ")" "{" FunctionBody "}" ;
StrictFormalParameters = FormalParameters ;
FormalParameters = ""/*[empty]*/ | FormalParameterList ;
FormalParameterList =
FunctionRestParameter 
| FormalsList 
| FormalsList "," WhiteSpace FunctionRestParameter
;
FormalsList =
FormalParameter 
| FormalsList "," WhiteSpace FormalParameter
;
FunctionRestParameter = BindingRestElement ;
FormalParameter = BindingElement ;
FunctionBody = FunctionStatementList ;
FunctionStatementList = StatementList ?;
ArrowFunction = ArrowParameters /*[no LineTerminator here]*/ "=>" ConciseBody ;
ArrowParameters = BindingIdentifier | ArrowFormalParameters ;
ConciseBody =
/*[lookahead ≠ { ]*/ AssignmentExpression 
| "{" FunctionBody "}"
;
ArrowFormalParameters = "(" StrictFormalParameters ")" ;
MethodDefinition =
PropertyName "(" StrictFormalParameters ")" "{" FunctionBody "}" 
| GeneratorMethod 
| "get" PropertyName "(" ")" "{" FunctionBody "}" 
| "set" PropertyName "(" PropertySetParameterList ")" "{" FunctionBody "}"
;
PropertySetParameterList = FormalParameter ;
GeneratorMethod = "*" PropertyName "(" StrictFormalParameters ")" "{" GeneratorBody "}" ;
GeneratorDeclaration =
"function"  "*"  BindingIdentifier  "("  FormalParameters  ")"  "{"  GeneratorBody  "}" 
| /*[+Default]*/  "function"  "*"  "("  FormalParameters  ")"  "{"  GeneratorBody  "}"
;
GeneratorExpression = "function"  "*"  BindingIdentifier  ?  "("  FormalParameters  ")"  "{"  GeneratorBody  "}" ;
GeneratorBody = FunctionBody ;
YieldExpression =
"yield" 
| "yield"  /*[no LineTerminator here]*/  AssignmentExpression 
| "yield"  /*[no LineTerminator here]*/  "*"  AssignmentExpression 
;
ClassDeclaration =
"class" WhiteSpace BindingIdentifier  ClassTail
| /*[+Default]*/  "class" WhiteSpace ClassTail
;
ClassExpression = "class" WhiteSpace BindingIdentifier  ?  ClassTail  ;
ClassTail = ClassHeritage  ?  "{"  ClassBody  ?  "}" ;
ClassHeritage = "extends" WhiteSpace LeftHandSideExpression  ;
ClassBody = ClassElementList  ;
ClassElementList = ClassElement | ClassElementList  ClassElement ;
ClassElement = MethodDefinition | "static" WhiteSpace  MethodDefinition | ";" ;

/* A.5 Scripts and Modules */

Script = ScriptBody ;
ScriptBody = StatementList ;
Module = ModuleBody ;
ModuleBody = ModuleItemList ;
ModuleItemList = ModuleItem LineTerminator | ModuleItemList ModuleItem ;
ModuleItem = ImportDeclaration | ExportDeclaration | StatementListItem ;
ImportDeclaration =
"import" WhiteSpace ImportClause  FromClause  ";" LineTerminator
| "import"  WhiteSpace ModuleSpecifier  ";" LineTerminator
;
ImportClause =
ImportedDefaultBinding 
| NameSpaceImport 
| NamedImports 
| ImportedDefaultBinding  ","  NameSpaceImport 
| ImportedDefaultBinding  ","  NamedImports
;
ImportedDefaultBinding = ImportedBinding ;
NameSpaceImport = "*"  "as"  ImportedBinding ;
NamedImports =
"{"  "}" 
| "{"  ImportsList  "}" 
| "{"  ImportsList  ","  "}"
;
FromClause = "from" WhiteSpace ModuleSpecifier ;
ImportsList = ImportSpecifier | ImportsList  ","  ImportSpecifier ;
ImportSpecifier =
ImportedBinding 
| IdentifierName  "as"  ImportedBinding
;
ModuleSpecifier = StringLiteral ;
ImportedBinding = BindingIdentifier ;
ExportDeclaration =
"export" WhiteSpace "*"  FromClause  ";" LineTerminator
| "export" WhiteSpace ExportClause  FromClause  ";" LineTerminator
| "export" WhiteSpace ExportClause  ";" LineTerminator
| "export" WhiteSpace VariableStatement LineTerminator
| "export" WhiteSpace Declaration LineTerminator
| "export" WhiteSpace "default" WhiteSpace HoistableDeclaration LineTerminator
| "export" WhiteSpace "default" WhiteSpace ClassDeclaration LineTerminator
| "export" WhiteSpace "default" WhiteSpace /*[lookahead ∉ {function, class}]*/  AssignmentExpression  ";" LineTerminator
;
ExportClause =
"{"  "}" 
| "{"  ExportsList  "}" 
| "{"  ExportsList  ","  "}"
;
ExportsList =
ExportSpecifier 
| ExportsList  ","  ExportSpecifier
;
ExportSpecifier =
IdentifierName 
| IdentifierName  "as"  IdentifierName
;

/* A.6 Number Conversions */

/*
StringNumericLiteral = StrWhiteSpace  ? | StrWhiteSpace  ?  StrNumericLiteral  StrWhiteSpace  ?
;
StrWhiteSpace = StrWhiteSpaceChar | StrWhiteSpace  ? ;
StrWhiteSpaceChar = WhiteSpace | LineTerminator ;
StrNumericLiteral = StrDecimalLiteral | BinaryIntegerLiteral | OctalIntegerLiteral | HexIntegerLiteral ;
StrDecimalLiteral = StrUnsignedDecimalLiteral | "+"  StrUnsignedDecimalLiteral | "-"  StrUnsignedDecimalLiteral ;
StrUnsignedDecimalLiteral =
Infinity 
| DecimalDigits  "."  DecimalDigits  ?  ExponentPart  ? 
| "."  DecimalDigits  ExponentPart  ? 
| DecimalDigits  ExponentPart  ?
;
DecimalDigits = DecimalDigit | DecimalDigits  DecimalDigit ;
DecimalDigit = "0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9" ;
ExponentPart = ExponentIndicator | SignedInteger ;
ExponentIndicator = "e" | "E" ;
SignedInteger = DecimalDigits | "+"  DecimalDigits | "-"  DecimalDigits ;
HexIntegerLiteral = "0x"  HexDigit | "0X"  HexDigit | HexIntegerLiteral  HexDigit ;
HexDigit = "0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9" | "a" | "b" | "c" | "d" | "e" | "f" | "A" | "B" | "C" | "D" | "E" | "F" ;
*/

/* A.7  Universal Resource Identifier Character Classes */

/*
uri = uriCharacters  ? ;
uriCharacters = uriCharacter  uriCharacters  ? ;
uriCharacter = uriReserved | uriUnescaped | uriEscaped ;
uriReserved = ";" | "/" | "?" | ":" | "@" | "&" | "=" | "+" | "$" | "," ;
uriUnescaped = uriAlpha | DecimalDigit | uriMark ;
uriEscaped = "%"  HexDigit  HexDigit ;
uriAlpha = "a" | "b" | "c" | "d" | "e" | "f" | "g" | "h" | "i" | "j" | "k" | "l" | "m" | "n" | "o" | "p" | "q" | "r" | "s" | "t"
| "u" | "v" | "w" | "x" | "y" | "z" | "A" | "B" | "C" | "D" | "E" | "F" | "G" | "H" | "I" | "J" | "K" | "L" | "M" | "N" | "O"
| "P" | "Q" | "R" | "S" | "T" | "U" | "V" | "W" | "X" | "Y" | "Z" ;
uriMark = "-" | "_" | "." | "!" | "~" | "*" | "'" | "(" | ")" ;
*/

/* A.8 Regular Expressions */

Pattern = Disjunction ;
Disjunction = Alternative | Alternative  "|"  Disjunction ;
Alternative = ""/*[empty]*/ | Alternative  Term ;
Term =
Assertion 
| Atom 
| Atom  Quantifier
;
Assertion =
"^" 
| "$" 
| "\\\\b" 
| "\\\\B" 
| "("  "?"  "="  Disjunction  ")" 
| "("  "?"  "!"  Disjunction  ")"
;
Quantifier = QuantifierPrefix | QuantifierPrefix  "?" ;
QuantifierPrefix =
"*" 
| "+" 
| "?" 
| "{"  DecimalDigits  "}" 
| "{"  DecimalDigits  ","  "}" 
| "{"  DecimalDigits  ","  DecimalDigits  "}"
;
Atom =
PatternCharacter 
| "." 
| "\\" AtomEscape 
| CharacterClass 
| "("  Disjunction  ")" 
| "("  "?"  ":"  Disjunction  ")"
;
SyntaxCharacter =
"^" | "$" | "\\" | "." | "*" | "+" | "?" | "(" | ")" | "[" | "]" | "{" | "}" | "|"
;
PatternCharacter = /[^$\\.^*+?)(][}{|]/;
AtomEscape = DecimalEscape | CharacterEscape | CharacterClassEscape ;
CharacterEscape =
ControlEscape 
| "c"  ControlLetter
| HexEscapeSequence
| RegExpUnicodeEscapeSequence
| IdentityEscape
;
ControlEscape = "f" | "n" | "r" | "t" | "v" ;
ControlLetter = "a" | "b" | "c" | "d" | "e" | "f" | "g" | "h" | "i" | "j" | "k" | "l" | "m" | "n" | "o" | "p" | "q" | "r" | "s" | "t" | "u" | "v" | "w" | "x" | "y"
| "z" | "A" | "B" | "C" | "D" | "E" | "F" | "G" | "H" | "I" | "J" | "K" | "L" | "M" | "N" | "O" | "P" | "Q" | "R" | "S" | "T" | "U" | "V" | "W" | "X" | "Y" | "Z"
;
RegExpUnicodeEscapeSequence =
/*[+U]*/  "u"  LeadSurrogate  "\\u"  TrailSurrogate
| /*[+U]*/  "u"  LeadSurrogate 
| /*[+U]*/  "u"  TrailSurrogate 
| /*[+U]*/  "u"  NonSurrogate 
| /*[~U]*/  "u"  Hex4Digits 
| /*[+U]*/  "u{"  HexDigits  "}"
;
LeadSurrogate =
Hex4Digits /* TODO [match only if the SV of Hex4Digits is in the inclusive range 0xD800 to 0xDBFF]*/
;
TrailSurrogate =
Hex4Digits /* TODO [match only if the SV of Hex4Digits is in the inclusive range 0xDC00 to 0xDFFF]*/
;
NonSurrogate =
Hex4Digits /* TODO [match only if the SV of Hex4Digits is not in the inclusive range 0xD800 to 0xDFFF]*/
;
IdentityEscape =
/*[+U]*/  SyntaxCharacter 
| /*[+U]*/  "/" 
| /*[~U]*/  /./  /* TODO but not UnicodeIDContinue */
;
DecimalEscape = DecimalIntegerLiteral /*[lookahead ∉ DecimalDigit]*/ ;
CharacterClassEscape = "d" | "D" | "s" | "S" | "w" | "W" ;
CharacterClass =
"["  /*[lookahead ∉ {^}]*/  ClassRanges  "]" 
| "["  "^"  ClassRanges  "]"
;
ClassRanges = ""/*[empty]*/ | NonemptyClassRanges ;
NonemptyClassRanges =
ClassAtom 
| ClassAtom  NonemptyClassRangesNoDash 
| ClassAtom  "-"  ClassAtom  ClassRanges 
;
NonemptyClassRangesNoDash =
ClassAtom 
| ClassAtomNoDash  NonemptyClassRangesNoDash 
| ClassAtomNoDash  "-"  ClassAtom  ClassRanges 
;
ClassAtom = "-" | ClassAtomNoDash ;
ClassAtomNoDash =
/[^\\\\]-]/
| "\\"  ClassEscape 
;
ClassEscape =
DecimalEscape
| "b"
| /*[+U]*/ "-"
| CharacterEscape
| CharacterClassEscape
;
