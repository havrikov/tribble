// tribble grammar for tribble grammars
// This grammar does not produce grammars with probability annotations
// TODO allow annotating max depth constraints, MinLength, MaxLength
// TODO add comments and whitespace

Grammar = Production+ ;
Production = NonTerminal " =" Alternation ";" "\n" ;
Alternation = Concatenation ( " |" Concatenation )* ;
Concatenation = (" " Atom)+ ;
Atom = (
        "(" Alternation ")" |
        Regex |
        Literal |
        NonTerminal ) Quant? ;

Quant = "?" | "+" | "*" | "{," num "}" | "{" num ",}" | "{" num "," num "}" ;

num = /0|([1-9][0-9]*)/ ;
NonTerminal = /[A-Za-z0-9_'$]+/ ;
Literal = "\"" ( /[^\"\\\\]/ | "\\" /[nrt\"\\\\]/ )* "\"" ;
Regex = "/" regexp "/";

// copied from regex_generative.tribble

regexp  = unionexp;
unionexp = interexp ( "|" unionexp )?;
interexp = concatexp ( "&" interexp )?;
concatexp = repeatexp concatexp?;

repeatexp = complexp "?"
            | complexp "*"
            | complexp "+"
            | complexp "{" num "}"
            | complexp "{" num ",}"
            | complexp "{" num "," num2 "}"
            | complexp;

complexp = "~"? charclassexp;

charclassexp = "[" charclasses "]"
               | "[^" charclasses "]"
               | simpleexp;

charclasses = charclass charclasses?;
charclass = charexp ("-" charexp)?;

simpleexp = charexp
            | "." // any single character
            | "\"" (/[^\\\"\)\(]/|"\\\\"|"\\)"|"\\(")+ "\"" // Unicode string without double-quotes
            | "()" // the empty string
            | "(" unionexp ")";

charexp = /[^\"\\\/\(\)]/ // a single non-reserved character
          | "\\" /[\"\\\/\(\)]/; // a single character

num2 = /1[0-9]/;
